EXTERNALS := old or subdir("externals")

var pkgconfig := fun(Args) expr(Args) => fun() Args

TEST := defined("TEST")
GENFLAGS := defined("GENFLAGS")

if TEST then
	setenv("TEST_CFLAGS", "-pipe")
end

var Config := if PLATFORM != "Mingw" then
	file("config") => fun(Target) do
		var File := Target:open("w")
		File:write("#!/bin/sh\n")
		File:write("echo \"-g -O1 $TEST_CFLAGS\"\n")
		File:close
		execute("chmod +x", Target)
	end
else
	file("config.bat") => fun(Target) do
		var File := Target:open("w")
		File:write("echo \"-g -O1 %TEST_CFLAGS%\"\n")
		File:close
	end
end

var TestCflags := expr("TestCflags")[Config, "TEST"] => fun() shell(Config):trim

CFLAGS := old + [TestCflags, pkgconfig("-march=native")]
LDFLAGS := old + ["-lminilang"]
:>PREBUILDS := old + [EXTERNALS."MINILANG"]

DEFAULT[c_program(file("test"), [file("test.o"), file("test2.o")])]

for File in file(""):ls("^.+\\.c$") do
	print('Found {File}\n')
end

var Generated := file("generated")["GENFLAGS"] => fun(Generated) do
	var GenDir := file("gen")
	GenDir:mkdir
	for I in 1 .. 5 do
		var GenFile := (GenDir / 'gen_{I}.c'):open("w")
		GenFile:write('#include "test.h"\n\nvoid gen_{I}() \{}\n')
		GenFile:close
	end
	Generated:open("w"):close
end

CFLAGS := old + ['-I{file("test.h"):dirname}', '-O3']

print('CFLAGS = {CFLAGS}\n')

var ScanTest := Generated:scan("ScanTest") => fun() do
	print("Scanning ScanTest\n")
	var Objects := []
	for Source in file("gen"):ls(r"^.+\.c$") do
		var Object := Source % "o"
		var Meta := meta(Source:basename)[Object]
		var Scan := Source:scan("INCLUDES") => c_includes
		Object[Source, Scan] => (c_compile !! [Source])
		Objects:put(Meta)
	end
	ret Objects
end

DEFAULT[ScanTest]

if defined("TEST2") then
	var Target := file("test.txt") => fun(Target) do
		var File := Target:open("w")
		File:write("Hello")
		File:close
	end
	DEFAULT[Target]
end

let ScopeTest := file("scope_test")

CFLAGS := old + ["-DTEST2"]

:>scope("scope_test";)
do
	:>CFLAGS := ["-DTEST1"]
	let Object := file("scope_test.o")
	let Source := file("scope_test.c")
	let Scan := Source:scan("INCLUDES")[PREBUILDS] => c_includes
	Object[Source, Scan] => (c_compile !! [Source])
	ScopeTest[Object] => fun(Executable) do
		execute('cc', '-o', Executable, Object, LDFLAGS)
	end
end

DEFAULT[ScopeTest]

DYNAMIC_VERSION := 3

let DynamicRabs := file("dynamic/build.rabs") => fun(Target) do
	file("dynamic"):mkdir
	print("Creating dynamic/test.txt\n")
	with Wr := file("dynamic/test.txt"):open("w") do
		Wr:write('Hello world! {DYNAMIC_VERSION}\n')
		Wr:close
	end
	print("Creating dynamic/build.rabs\n")
	with Wr := Target:open("w") do
		Wr:write(':> Version {DYNAMIC_VERSION}
:> {time()}

let Test := file("dynamic.test")[file("test.txt")] => fun(Target) do
	file("test.txt"):copy(Target)
	with File := Target:open("a") do
		File:write(\'TEST_FLAG = \{TEST_FLAG}\\n\')
		File:close
	end
end

print(\'Using dynamic rabs to create \{Test}\\n\')

DEFAULT[Test]

print(\'\{context():path} => \{list(DEFAULT:depends)}\\n\')
')
		Wr:close()
	end
end

let Dynamic := DynamicRabs:scan("subdir")[ITERATION] => fun(Target) do
	let Context := subdir("dynamic", {"TEST_FLAG" is "TEST_VALUE_2"})
	[Context::DEFAULT]
end

DEFAULT[Dynamic]
